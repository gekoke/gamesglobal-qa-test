{
	"info": {
		"_postman_id": "b4ecf44a-4a3a-4c12-9517-25f584fffd72",
		"name": "ReqRes API",
		"description": "Fake data CRUD API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33365416"
	},
	"item": [
		{
			"name": "Tests",
			"item": [
				{
					"name": "users",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetches a known user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const sdk = require('postman-collection');",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Data object must exist\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.data).to.exist;",
													"  pm.expect(responseData.data).to.be.an('object');",
													"});",
													"",
													"pm.test(\"Avatar is a valid URL\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(new sdk.Url(responseData.avatar)).to.not.throw;",
													"});",
													"",
													"pm.test(\"Email is not obviously invalid\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.data.email).to.be.a('string').and.to.match(/^.+@.+$/);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{existingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{existingUserId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"id\": \"<integer>\",\n    \"email\": \"<string>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"avatar\": \"<string>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Does not fetch an unknown user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});",
													"",
													"pm.test(\"Response JSON is empty\", function () {",
													"    pm.expect(pm.response.json()).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{nonExistingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{nonExistingUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Does not fetch a user with negative id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});",
													"",
													"pm.test(\"Response JSON is empty\", function () {",
													"    pm.expect(pm.response.json()).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Does not fetch a user with string type path parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});",
													"",
													"pm.test(\"Response JSON is empty\", function () {",
													"    pm.expect(pm.response.json()).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/foo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"foo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Updates a user with nothing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{existingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{existingUserId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a user with nothing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/{{existingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{existingUserId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request\", function () {",
													"    const requestFields = Object.keys(JSON.parse(pm.request.body.raw));",
													"    const responseFields = Object.keys(pm.response.json());",
													"",
													"    pm.expect(responseFields).to.include.members(requestFields);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request and has the same values\", function () {",
													"    const requestData = JSON.parse(pm.request.body.raw);",
													"    const responseData= pm.response.json();",
													"",
													"    const requestFields = Object.keys(requestData);",
													"",
													"    pm.expect(requestFields.every(field => responseData[field] === requestData[field])).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{existingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{existingUserId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request\", function () {",
													"    const requestFields = Object.keys(JSON.parse(pm.request.body.raw));",
													"    const responseFields = Object.keys(pm.response.json());",
													"",
													"    pm.expect(responseFields).to.include.members(requestFields);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request and has the same values\", function () {",
													"    const requestData = JSON.parse(pm.request.body.raw);",
													"    const responseData= pm.response.json();",
													"",
													"    const requestFields = Object.keys(requestData);",
													"",
													"    pm.expect(requestFields.every(field => responseData[field] === requestData[field])).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{existingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{existingUserId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a user with repeated keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request\", function () {",
													"    const requestFields = Object.keys(JSON.parse(pm.request.body.raw));",
													"    const responseFields = Object.keys(pm.response.json());",
													"",
													"    pm.expect(responseFields).to.include.members(requestFields);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request and has the same values\", function () {",
													"    const requestData = JSON.parse(pm.request.body.raw);",
													"    const responseData = pm.response.json();",
													"",
													"    const requestFields = Object.keys(requestData);",
													"",
													"    pm.expect(requestFields.every(field => responseData[field] === requestData[field])).to.be.true;",
													"});",
													"",
													"pm.test(\"Last value takes precedence when repeated keys provided\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.job).to.equal(\"B\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"job\": \"A\",\n    \"job\": \"B\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{existingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{existingUserId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a user with repeated keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request\", function () {",
													"    const requestFields = Object.keys(JSON.parse(pm.request.body.raw));",
													"    const responseFields = Object.keys(pm.response.json());",
													"",
													"    pm.expect(responseFields).to.include.members(requestFields);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request and has the same values\", function () {",
													"    const requestData = JSON.parse(pm.request.body.raw);",
													"    const responseData = pm.response.json();",
													"",
													"    const requestFields = Object.keys(requestData);",
													"",
													"    pm.expect(requestFields.every(field => responseData[field] === requestData[field])).to.be.true;",
													"});",
													"",
													"pm.test(\"Last value takes precedence when repeated keys provided\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.job).to.equal(\"B\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"job\": \"A\",\n    \"job\": \"B\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{existingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{existingUserId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Deletes a known user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/{{existingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{existingUserId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Confirms that unknown user is deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/{{nonExistingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{nonExistingUserId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Fetches a user list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const sdk = require('postman-collection');",
											"",
											"pm.test(\"Response 'page' field value is 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.equal(1);",
											"});",
											"",
											"pm.test(\"Response 'per_page' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total_pages' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total' field value is at least 0\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"The product of the response's 'per_page' field value and 'total_pages' field value is equal to its 'total' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.per_page * responseData.total_pages).to.equal(responseData.total);",
											"});",
											"",
											"pm.test(\"Avatar in each user object is a valid URL\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.data.forEach(function (user) {",
											"        pm.expect(new sdk.Url(user.avatar)).to.not.throw;",
											"    });",
											"});",
											"",
											"pm.test(\"Email for each user is not obviously invalid\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.data.forEach(function (user) {",
											"        pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+$/);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "<integer>",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"total_pages\": \"<integer>\",\n  \"data\": [\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"avatar\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"avatar\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Does not fetch user list with negative per page parameter value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?per_page=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Does not fetch user list with negative page parameter value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "-1"
										},
										{
											"key": "per_page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "-1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Does not fetch user list with  per page parameter value of type string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?per_page=foobar",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "foobar"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Does not fetch user list with page parameter value of type string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page=foobar",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "foobar"
										},
										{
											"key": "per_page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "foobar",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"total_pages\": \"<integer>\",\n  \"data\": [\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"avatar\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"avatar\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Fetches a user list with specific page size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const sdk = require('postman-collection');",
											"",
											"pm.test(\"Response 'per_page' field value is equal to request 'per_page' parameter value\", function () {",
											"    const responseData = pm.response.json();",
											"    const requestPageParameterValue = parseInt(pm.request.url.query.toObject()[\"per_page\"]);",
											"    const responsePageFieldValue = responseData.per_page;",
											"",
											"    pm.expect(responsePageFieldValue).to.equal(requestPageParameterValue);",
											"});",
											"",
											"pm.test(\"Response 'page' field value is less than or equal to 'total_pages' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.exist.and.to.be.lte(responseData.total_pages);",
											"});",
											"",
											"pm.test(\"Response 'per_page' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total_pages' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total' field value is at least 0\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"The product of the response's 'per_page' field value and 'total_pages' field value is equal to its 'total' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.per_page * responseData.total_pages).to.equal(responseData.total);",
											"});",
											"",
											"pm.test(\"Avatar in each user object is a valid URL\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.data.forEach(function (user) {",
											"        pm.expect(new sdk.Url(user.avatar)).to.not.throw;",
											"    });",
											"});",
											"",
											"pm.test(\"Email for each user is not obviously invalid\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.data.forEach(function (user) {",
											"        pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+$/);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?per_page=3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "3"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"total_pages\": \"<integer>\",\n  \"data\": [\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"avatar\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"avatar\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Fetches a specific page from the user list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const sdk = require('postman-collection');",
											"",
											"pm.test(\"Response 'page' field value is equal to request 'page' parameter value\", function () {",
											"    const responseData = pm.response.json();",
											"    const requestPageParameterValue = parseInt(pm.request.url.query.toObject()[\"page\"]);",
											"    const responsePageFieldValue = responseData.page;",
											"",
											"    pm.expect(responsePageFieldValue).to.equal(requestPageParameterValue);",
											"});",
											"",
											"pm.test(\"Response 'page' field value is less than or equal to 'total_pages' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.exist.and.to.be.lte(responseData.total_pages);",
											"});",
											"",
											"pm.test(\"Response 'per_page' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total_pages' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total' field value is at least 0\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"The product of the response's 'per_page' field value and 'total_pages' field value is equal to its 'total' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.per_page * responseData.total_pages).to.equal(responseData.total);",
											"});",
											"",
											"pm.test(\"Avatar in each user object is a valid URL\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.data.forEach(function (user) {",
											"        pm.expect(new sdk.Url(user.avatar)).to.not.throw;",
											"    });",
											"});",
											"",
											"pm.test(\"Email for each user is not obviously invalid\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.data.forEach(function (user) {",
											"        pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+$/);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page={{usersListExistingPageNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "{{usersListExistingPageNumber}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"total_pages\": \"<integer>\",\n  \"data\": [\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"avatar\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"avatar\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Fetches a specific page with specific page size from the user list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const sdk = require('postman-collection');",
											"",
											"pm.test(\"Response 'page' field value is equal to request 'page' parameter value\", function () {",
											"    const responseData = pm.response.json();",
											"    const requestPageParameterValue = parseInt(pm.request.url.query.toObject()[\"page\"]);",
											"    const responsePageFieldValue = responseData.page;",
											"",
											"    pm.expect(responsePageFieldValue).to.equal(requestPageParameterValue);",
											"});",
											"",
											"pm.test(\"Response 'per_page' field value is equal to request 'per_page' parameter value\", function () {",
											"    const responseData = pm.response.json();",
											"    const requestPageParameterValue = parseInt(pm.request.url.query.toObject()[\"per_page\"]);",
											"    const responsePageFieldValue = responseData.per_page;",
											"",
											"    pm.expect(responsePageFieldValue).to.equal(requestPageParameterValue);",
											"});",
											"",
											"pm.test(\"Response 'page' field value is less than or equal to 'total_pages' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.exist.and.to.be.lte(responseData.total_pages);",
											"});",
											"",
											"pm.test(\"Response 'per_page' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total_pages' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total' field value is at least 0\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"The product of the response's 'per_page' field value and 'total_pages' field value is equal to its 'total' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.per_page * responseData.total_pages).to.equal(responseData.total);",
											"});",
											"",
											"pm.test(\"Avatar in each user object is a valid URL\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.data.forEach(function (user) {",
											"        pm.expect(new sdk.Url(user.avatar)).to.not.throw;",
											"    });",
											"});",
											"",
											"pm.test(\"Email for each user is not obviously invalid\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    responseData.data.forEach(function (user) {",
											"        pm.expect(user.email).to.be.a('string').and.to.match(/^.+@.+$/);",
											"    });",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?page={{usersListExistingPageNumber}}&per_page=3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "{{usersListExistingPageNumber}}"
										},
										{
											"key": "per_page",
											"value": "3"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"total_pages\": \"<integer>\",\n  \"data\": [\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"avatar\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"email\": \"<string>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"avatar\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "{resource}",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetches a known user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const sdk = require('postman-collection');",
													"",
													"pm.test(\"Response status code is 200\", function () {",
													"  pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type header is application/json\", function () {",
													"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"pm.test(\"Data object must exist\", function () {",
													"  const responseData = pm.response.json();",
													"  ",
													"  pm.expect(responseData.data).to.exist;",
													"  pm.expect(responseData.data).to.be.an('object');",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/{{existingResourceId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"{{existingResourceId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"id\": \"<integer>\",\n    \"email\": \"<string>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"avatar\": \"<string>\"\n  }\n}"
										}
									]
								},
								{
									"name": "Does not fetch an unknown user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});",
													"",
													"pm.test(\"Response JSON is empty\", function () {",
													"    pm.expect(pm.response.json()).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/{{nonExistingResourceId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"{{nonExistingResourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Does not resource a user with negative id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});",
													"",
													"pm.test(\"Response JSON is empty\", function () {",
													"    pm.expect(pm.response.json()).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/-1",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Does not fetch a resource with string type path parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 404\", function () {",
													"    pm.expect(pm.response.code).to.equal(404);",
													"});",
													"",
													"pm.test(\"Response JSON is empty\", function () {",
													"    pm.expect(pm.response.json()).to.be.empty;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/foo",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"foo"
											]
										}
									},
									"response": []
								},
								{
									"name": "Updates a resource with nothing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/{{existingResourceId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"{{existingResourceId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a resource with nothing",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/{{existingResourceId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"{{existingResourceId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request\", function () {",
													"    const requestFields = Object.keys(JSON.parse(pm.request.body.raw));",
													"    const responseFields = Object.keys(pm.response.json());",
													"",
													"    pm.expect(responseFields).to.include.members(requestFields);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request and has the same values\", function () {",
													"    const requestData = JSON.parse(pm.request.body.raw);",
													"    const responseData= pm.response.json();",
													"",
													"    const requestFields = Object.keys(requestData);",
													"",
													"    pm.expect(requestFields.every(field => responseData[field] === requestData[field])).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/{{existingResourceId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"{{existingResourceId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request\", function () {",
													"    const requestFields = Object.keys(JSON.parse(pm.request.body.raw));",
													"    const responseFields = Object.keys(pm.response.json());",
													"",
													"    pm.expect(responseFields).to.include.members(requestFields);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request and has the same values\", function () {",
													"    const requestData = JSON.parse(pm.request.body.raw);",
													"    const responseData= pm.response.json();",
													"",
													"    const requestFields = Object.keys(requestData);",
													"",
													"    pm.expect(requestFields.every(field => responseData[field] === requestData[field])).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"morpheus\",\n    \"job\": \"zion resident\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/{{existingResourceId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"{{existingResourceId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a resource with repeated keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request\", function () {",
													"    const requestFields = Object.keys(JSON.parse(pm.request.body.raw));",
													"    const responseFields = Object.keys(pm.response.json());",
													"",
													"    pm.expect(responseFields).to.include.members(requestFields);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request and has the same values\", function () {",
													"    const requestData = JSON.parse(pm.request.body.raw);",
													"    const responseData = pm.response.json();",
													"",
													"    const requestFields = Object.keys(requestData);",
													"",
													"    pm.expect(requestFields.every(field => responseData[field] === requestData[field])).to.be.true;",
													"});",
													"",
													"pm.test(\"Last value takes precedence when repeated keys provided\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.job).to.equal(\"B\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"job\": \"A\",\n    \"job\": \"B\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/{{existingResourceId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"{{existingResourceId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a resource with repeated keys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require(\"moment\");",
													"",
													"pm.test('Response status code is 200', function () {",
													"    pm.expect(pm.response.code).to.equal(200);",
													"})",
													"",
													"pm.test(\"Response has 'updatedAt' field with value approximately equal to now\", function () {",
													"    const responseData = pm.response.json();",
													"    const now = moment(new Date());",
													"    ",
													"    const delta = moment.duration(now.diff(responseData.updatedAt));",
													"    const deltaTimeSeconds = delta.asSeconds();",
													"",
													"    pm.expect(deltaTimeSeconds).to.be.lte(1);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request\", function () {",
													"    const requestFields = Object.keys(JSON.parse(pm.request.body.raw));",
													"    const responseFields = Object.keys(pm.response.json());",
													"",
													"    pm.expect(responseFields).to.include.members(requestFields);",
													"});",
													"",
													"pm.test(\"Response includes all fields from the request and has the same values\", function () {",
													"    const requestData = JSON.parse(pm.request.body.raw);",
													"    const responseData = pm.response.json();",
													"",
													"    const requestFields = Object.keys(requestData);",
													"",
													"    pm.expect(requestFields.every(field => responseData[field] === requestData[field])).to.be.true;",
													"});",
													"",
													"pm.test(\"Last value takes precedence when repeated keys provided\", function () {",
													"    const responseData = pm.response.json();",
													"",
													"    pm.expect(responseData.job).to.equal(\"B\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"job\": \"A\",\n    \"job\": \"B\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/{{existingUserId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"{{existingUserId}}"
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Deletes a known resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/{{existingResourceId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"{{existingResourceId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Confirms that unknown resource is deleted",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/{{chosenResource}}/{{nonExistingResourceId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"{{chosenResource}}",
												"{{nonExistingResourceId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Fetches a resource list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const sdk = require('postman-collection');",
											"",
											"pm.test(\"Response 'page' field value is 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.equal(1);",
											"});",
											"",
											"pm.test(\"Response 'per_page' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total_pages' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total' field value is at least 0\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"The product of the response's 'per_page' field value and 'total_pages' field value is equal to its 'total' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.per_page * responseData.total_pages).to.equal(responseData.total);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{chosenResource}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{chosenResource}}"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "<integer>",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:resource?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":resource"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"total_pages\": \"<integer>\",\n  \"data\": [\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"year\": \"<integer>\",\n      \"color\": \"<string>\",\n      \"pantone_value\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"year\": \"<integer>\",\n      \"color\": \"<string>\",\n      \"pantone_value\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Does not fetch resource list with negative per page parameter value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{chosenResource}}?per_page=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{chosenResource}}"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Does not fetch resource list with negative page parameter value",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{chosenResource}}?page=-1",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{chosenResource}}"
									],
									"query": [
										{
											"key": "page",
											"value": "-1"
										},
										{
											"key": "per_page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "-1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Does not fetch resource list with  per page parameter value of type string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{chosenResource}}?per_page=foobar",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{chosenResource}}"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "foobar"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Does not fetch resource list with page parameter value of type string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{chosenResource}}?page=foobar",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{chosenResource}}"
									],
									"query": [
										{
											"key": "page",
											"value": "foobar"
										},
										{
											"key": "per_page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "foobar",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Fetches a resource list with specific page size",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const sdk = require('postman-collection');",
											"",
											"pm.test(\"Response 'per_page' field value is equal to request 'per_page' parameter value\", function () {",
											"    const responseData = pm.response.json();",
											"    const requestPageParameterValue = parseInt(pm.request.url.query.toObject()[\"per_page\"]);",
											"    const responsePageFieldValue = responseData.per_page;",
											"",
											"    pm.expect(responsePageFieldValue).to.equal(requestPageParameterValue);",
											"});",
											"",
											"pm.test(\"Response 'page' field value is less than or equal to 'total_pages' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.exist.and.to.be.lte(responseData.total_pages);",
											"});",
											"",
											"pm.test(\"Response 'per_page' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total_pages' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total' field value is at least 0\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"The product of the response's 'per_page' field value and 'total_pages' field value is equal to its 'total' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.per_page * responseData.total_pages).to.equal(responseData.total);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{chosenResource}}?per_page=3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{chosenResource}}"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "3"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:resource?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":resource"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"total_pages\": \"<integer>\",\n  \"data\": [\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"year\": \"<integer>\",\n      \"color\": \"<string>\",\n      \"pantone_value\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"year\": \"<integer>\",\n      \"color\": \"<string>\",\n      \"pantone_value\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Fetches a specific page from the resource list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const sdk = require('postman-collection');",
											"",
											"pm.test(\"Response 'page' field value is equal to request 'page' parameter value\", function () {",
											"    const responseData = pm.response.json();",
											"    const requestPageParameterValue = parseInt(pm.request.url.query.toObject()[\"page\"]);",
											"    const responsePageFieldValue = responseData.page;",
											"",
											"    pm.expect(responsePageFieldValue).to.equal(requestPageParameterValue);",
											"});",
											"",
											"pm.test(\"Response 'page' field value is less than or equal to 'total_pages' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.exist.and.to.be.lte(responseData.total_pages);",
											"});",
											"",
											"pm.test(\"Response 'per_page' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total_pages' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total' field value is at least 0\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"The product of the response's 'per_page' field value and 'total_pages' field value is equal to its 'total' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.per_page * responseData.total_pages).to.equal(responseData.total);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{chosenResource}}?page={{usersListExistingPageNumber}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{chosenResource}}"
									],
									"query": [
										{
											"key": "page",
											"value": "{{usersListExistingPageNumber}}"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:resource?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":resource"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"total_pages\": \"<integer>\",\n  \"data\": [\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"year\": \"<integer>\",\n      \"color\": \"<string>\",\n      \"pantone_value\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"year\": \"<integer>\",\n      \"color\": \"<string>\",\n      \"pantone_value\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						},
						{
							"name": "Fetches a specific page with specific page size from the resource list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const sdk = require('postman-collection');",
											"",
											"pm.test(\"Response 'page' field value is equal to request 'page' parameter value\", function () {",
											"    const responseData = pm.response.json();",
											"    const requestPageParameterValue = parseInt(pm.request.url.query.toObject()[\"page\"]);",
											"    const responsePageFieldValue = responseData.page;",
											"",
											"    pm.expect(responsePageFieldValue).to.equal(requestPageParameterValue);",
											"});",
											"",
											"pm.test(\"Response 'per_page' field value is equal to request 'per_page' parameter value\", function () {",
											"    const responseData = pm.response.json();",
											"    const requestPageParameterValue = parseInt(pm.request.url.query.toObject()[\"per_page\"]);",
											"    const responsePageFieldValue = responseData.per_page;",
											"",
											"    pm.expect(responsePageFieldValue).to.equal(requestPageParameterValue);",
											"});",
											"",
											"pm.test(\"Response 'page' field value is less than or equal to 'total_pages' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.exist.and.to.be.lte(responseData.total_pages);",
											"});",
											"",
											"pm.test(\"Response 'per_page' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.page).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total_pages' field value is at least 1\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(1);",
											"});",
											"",
											"pm.test(\"Response 'total' field value is at least 0\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.total_pages).to.be.gte(0);",
											"});",
											"",
											"pm.test(\"The product of the response's 'per_page' field value and 'total_pages' field value is equal to its 'total' field value\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.per_page * responseData.total_pages).to.equal(responseData.total);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/{{chosenResource}}?page={{usersListExistingPageNumber}}&per_page=3",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"{{chosenResource}}"
									],
									"query": [
										{
											"key": "page",
											"value": "{{usersListExistingPageNumber}}"
										},
										{
											"key": "per_page",
											"value": "3"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:resource?page=<integer>&per_page=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":resource"
											],
											"query": [
												{
													"key": "page",
													"value": "<integer>"
												},
												{
													"key": "per_page",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": \"<integer>\",\n  \"per_page\": \"<integer>\",\n  \"total\": \"<integer>\",\n  \"total_pages\": \"<integer>\",\n  \"data\": [\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"year\": \"<integer>\",\n      \"color\": \"<string>\",\n      \"pantone_value\": \"<string>\"\n    },\n    {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\",\n      \"year\": \"<integer>\",\n      \"color\": \"<string>\",\n      \"pantone_value\": \"<string>\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "login",
					"item": [
						{
							"name": "Creates a session when providing correct credentials",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has the required Content-Type header of application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response has 'token' field of type string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData).to.have.property('token');",
											"});",
											"",
											"pm.test(`Token has length ${constants.tokenLength}`, function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.token).to.be.a('string').and.to.have.length(constants.tokenLength);",
											"});",
											"",
											"pm.test(\"Token contains no unexpected characters\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.token).to.be.a('string').and.to.match(/^[a-zA-Z0-9]*$/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "",
											"type": "string"
										},
										{
											"key": "username",
											"value": "",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{correctEmailForUserId4}}\",\n  \"password\": \"{{correctPasswordForUserId4}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Login error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Does not create a session when providing incorrect email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has the required Content-Type header of application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Error message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{correctPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{correctEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{incorrectEmailForUserId4}}\",\n  \"password\": \"{{correctPasswordForUserId4}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Login error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Does not create a session when providing no email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has the required Content-Type header of application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Error message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{correctPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{correctEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"password\": \"{{correctPasswordForUserId4}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Login error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Does not create a session when providing blank password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has the required Content-Type header of application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Error message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"pm.test(\"Error message mentions password\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.contain(\"password\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{correctPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{correctEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{correctEmailForUserId4}}\",\n  \"password\": \"\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Login error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Does not create a session when providing no password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response has the required Content-Type header of application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Error message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"pm.test(\"Error message mentions password\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.contain(\"password\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{correctPassword}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{correctEmail}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{correctEmailForUserId4}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Login error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "register",
					"item": [
						{
							"name": "Creates a user when provided correct data",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Response has 'id' field of type integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.id).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Response has 'token' field of type string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.token).to.be.a('string');",
											"});",
											"",
											"pm.test(`Token has length ${constants.tokenLength}`, function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.token).to.be.a('string').and.to.have.length(constants.tokenLength);",
											"})",
											"",
											"pm.test(\"Token contains no unexpected characters\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.token).to.be.a('string').and.to.match(/[a-zA-Z0-9]*/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{correctEmailForUserId4}}\",\n    \"password\": \"{{arbitraryCorrectPassword}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Register error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Creates a user when provided correct data with optional username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.expect(pm.response.code).to.equal(200);",
											"});",
											"",
											"pm.test(\"Response has 'id' field of type integer\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.id).to.be.a('number');",
											"});",
											"",
											"pm.test(\"Response has 'token' field of type string\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.token).to.be.a('string');",
											"});",
											"",
											"pm.test(`Token has length ${constants.tokenLength}`, function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.token).to.be.a('string').and.to.have.length(constants.tokenLength);",
											"})",
											"",
											"pm.test(\"Token contains no unexpected characters\", function () {",
											"    const responseData = pm.response.json();",
											"",
											"    pm.expect(responseData.token).to.be.a('string').and.to.match(/[a-zA-Z0-9]*/);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{correctEmailForUserId4}}\",\n    \"email\": \"{{correctEmailForUserId4}}\",\n    \"password\": \"{{arbitraryCorrectPassword}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Register error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Does not create a user when provided incorrect username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Error message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{incorrectUsernameForUserId4}}\",\n    \"email\": \"{{correctEmailForUserId4}}\",\n    \"password\": \"{{arbitraryCorrectPassword}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Register error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Does not create a user when provided no password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Error message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"pm.test(\"Error message mentions password\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.contain(\"password\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{correctEmailForUserId4}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Register error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Does not create a user when provided no email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Error message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"pm.test(\"Error message mentions email\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.contain(\"email\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"password\": \"{{arbitraryCorrectPassword}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Register error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Does not create a user when provided blank email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Error message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"pm.test(\"Error message mentions email\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.contain(\"email\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"\",\n    \"password\": \"{{arbitraryCorrectPassword}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Register error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Does not create a user when provided email without '@' symbol",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Error message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"foobar\",\n    \"password\": \"{{arbitraryCorrectPassword}}\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Register error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Does not create a user when provided blank password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.expect(pm.response.code).to.equal(400);",
											"});",
											"",
											"",
											"pm.test(\"Content-Type header is application/json\", function () {",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"",
											"pm.test(\"Error message is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.be.a('string').and.to.have.lengthOf.at.least(1);",
											"});",
											"",
											"pm.test(\"Error message mentions password\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData.error).to.contain(\"password\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \"{{correctEmailForUserId4}}\",\n    \"password\": \"\"\n}\n",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<string>\",\n  \"token\": \"<string>\"\n}"
								},
								{
									"name": "Register error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"<string>\",\n  \"email\": \"<string>\",\n  \"password\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"<string>\"\n}"
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "OpenAPI Schema Tests",
			"item": [
				{
					"name": "{resource}",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetches an unknown resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/:resource/:id - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/:resource/:id - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"year\":{\"type\":\"integer\"},\"color\":{\"type\":\"string\"},\"pantone_value\":{\"type\":\"string\"}}}}}",
													"",
													"// Validate if response matches JSON schema ",
													"pm.test(\"[GET]::/:resource/:id - Schema is valid\", function() {",
													"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:resource/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":resource",
												":id"
											],
											"variable": [
												{
													"key": "resource",
													"value": ""
												},
												{
													"key": "id",
													"value": "-34711407"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/:resource/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														":resource",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "-34711407"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"id\": -29076380,\n    \"name\": \"enim\",\n    \"year\": 9023836,\n    \"color\": \"Duis occaecat qui enim\",\n    \"pantone_value\": \"laborum non aliqua\"\n  }\n}"
										}
									]
								},
								{
									"name": "Updates an unknown resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Validate status 2xx \npm.test(\"[PUT]::/:resource/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
													"// Validate if response header has matching content-type\npm.test(\"[PUT]::/:resource/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
													"// Validate if response has JSON Body \npm.test(\"[PUT]::/:resource/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
													"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"updatedAt\":{\"type\":\"string\"}}}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/:resource/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:resource/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":resource",
												":id"
											],
											"variable": [
												{
													"key": "resource"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/:resource/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														":resource",
														":id"
													],
													"variable": [
														{
															"key": "resource"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates an unknown resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Validate status 2xx \npm.test(\"[PATCH]::/:resource/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
													"// Validate if response header has matching content-type\npm.test(\"[PATCH]::/:resource/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
													"// Validate if response has JSON Body \npm.test(\"[PATCH]::/:resource/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
													"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"updatedAt\":{\"type\":\"string\"}}}\n\n// Validate if response matches JSON schema \npm.test(\"[PATCH]::/:resource/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:resource/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":resource",
												":id"
											],
											"variable": [
												{
													"key": "resource"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/:resource/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														":resource",
														":id"
													],
													"variable": [
														{
															"key": "resource"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Deletes an unknown resource",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Validate status 2xx \npm.test(\"[DELETE]::/:resource/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
													"// Validate if response has empty Body \npm.test(\"[DELETE]::/:resource/:id - Response has empty Body\", function () {\n    pm.response.to.not.be.withBody;\n});\n"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/:resource/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":resource",
												":id"
											],
											"variable": [
												{
													"key": "resource"
												},
												{
													"key": "id"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/:resource/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														":resource",
														":id"
													],
													"variable": [
														{
															"key": "resource"
														},
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Fetches a resource list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate status 2xx \npm.test(\"[GET]::/:resource - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[GET]::/:resource - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[GET]::/:resource - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"page\":{\"type\":\"integer\"},\"per_page\":{\"type\":\"integer\"},\"total\":{\"type\":\"integer\"},\"total_pages\":{\"type\":\"integer\"},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"name\":{\"type\":\"string\"},\"year\":{\"type\":\"integer\"},\"color\":{\"type\":\"string\"},\"pantone_value\":{\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/:resource - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/:resource",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										":resource"
									],
									"query": [
										{
											"key": "page",
											"value": "-34711407",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "-34711407",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "resource"
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/:resource?page=-34711407&per_page=-34711407",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												":resource"
											],
											"query": [
												{
													"key": "page",
													"value": "-34711407"
												},
												{
													"key": "per_page",
													"value": "-34711407"
												}
											],
											"variable": [
												{
													"key": "resource"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": -82102818,\n  \"per_page\": -72804297,\n  \"total\": 66824663,\n  \"total_pages\": 58853783,\n  \"data\": [\n    {\n      \"id\": 59249185,\n      \"name\": \"veniam elit ut\",\n      \"year\": 16576763,\n      \"color\": \"cupidatat qui velit ut\",\n      \"pantone_value\": \"tempor occaecat in minim\"\n    },\n    {\n      \"id\": -19142271,\n      \"name\": \"in fugiat ut\",\n      \"year\": -57543713,\n      \"color\": \"dolore ut pariatur ea\",\n      \"pantone_value\": \"ni\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Fetches a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/users/:id - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/users/:id - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"object\",\"properties\":{\"data\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"email\":{\"type\":\"string\"},\"first_name\":{\"type\":\"string\"},\"last_name\":{\"type\":\"string\"},\"avatar\":{\"type\":\"string\"}}}}}",
													"",
													"// Validate if response matches JSON schema ",
													"pm.test(\"[GET]::/users/:id - Schema is valid\", function() {",
													"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "-34711407"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id",
															"value": "-34711407"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"id\": 53542311,\n    \"email\": \"proident ut\",\n    \"first_name\": \"laboris adipisicing al\",\n    \"last_name\": \"dolor reprehenderit\",\n    \"avatar\": \"elit eu irure\"\n  }\n}"
										}
									]
								},
								{
									"name": "Updates a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Validate status 2xx \npm.test(\"[PUT]::/users/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
													"// Validate if response header has matching content-type\npm.test(\"[PUT]::/users/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
													"// Validate if response has JSON Body \npm.test(\"[PUT]::/users/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
													"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"updatedAt\":{\"type\":\"string\"}}}\n\n// Validate if response matches JSON schema \npm.test(\"[PUT]::/users/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Updates a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Validate status 2xx \npm.test(\"[PATCH]::/users/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
													"// Validate if response header has matching content-type\npm.test(\"[PATCH]::/users/:id - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
													"// Validate if response has JSON Body \npm.test(\"[PATCH]::/users/:id - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
													"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"updatedAt\":{\"type\":\"string\"}}}\n\n// Validate if response matches JSON schema \npm.test(\"[PATCH]::/users/:id - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
												]
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "PATCH",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"updatedAt\": \"ut veniam\"\n}"
										}
									]
								},
								{
									"name": "Deletes a user",
									"event": [
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													"// Validate status 2xx \npm.test(\"[DELETE]::/users/:id - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
													"// Validate if response has empty Body \npm.test(\"[DELETE]::/users/:id - Response has empty Body\", function () {\n    pm.response.to.not.be.withBody;\n});\n"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"response": [
										{
											"name": "Success",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/users/:id",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "No Content",
											"code": 204,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "Content-Type",
													"value": "text/plain"
												}
											],
											"cookie": [],
											"body": ""
										}
									]
								}
							]
						},
						{
							"name": "Fetches a user list",
							"event": [
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"// Validate status 2xx \npm.test(\"[GET]::/users - Status code is 2xx\", function () {\n   pm.response.to.be.success;\n});\n",
											"// Validate if response header has matching content-type\npm.test(\"[GET]::/users - Content-Type is application/json\", function () {\n   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\n});\n",
											"// Validate if response has JSON Body \npm.test(\"[GET]::/users - Response has JSON Body\", function () {\n    pm.response.to.have.jsonBody();\n});\n",
											"// Response Validation\nconst schema = {\"type\":\"object\",\"properties\":{\"page\":{\"type\":\"integer\"},\"per_page\":{\"type\":\"integer\"},\"total\":{\"type\":\"integer\"},\"total_pages\":{\"type\":\"integer\"},\"data\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"integer\"},\"email\":{\"type\":\"string\"},\"first_name\":{\"type\":\"string\"},\"last_name\":{\"type\":\"string\"},\"avatar\":{\"type\":\"string\"}}}}}}\n\n// Validate if response matches JSON schema \npm.test(\"[GET]::/users - Schema is valid\", function() {\n    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});\n});\n"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "page",
											"value": "-34711407",
											"disabled": true
										},
										{
											"key": "per_page",
											"value": "-34711407",
											"disabled": true
										}
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users?page=-34711407&per_page=-34711407",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											],
											"query": [
												{
													"key": "page",
													"value": "-34711407"
												},
												{
													"key": "per_page",
													"value": "-34711407"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"page\": 41528627,\n  \"per_page\": -1936040,\n  \"total\": -53157623,\n  \"total_pages\": -76282701,\n  \"data\": [\n    {\n      \"id\": 77500877,\n      \"email\": \"sit\",\n      \"first_name\": \"dolor occaecat commodo proident\",\n      \"last_name\": \"dolor ex in\",\n      \"avatar\": \"cupidatat nisi Ut\"\n    },\n    {\n      \"id\": 12421750,\n      \"email\": \"incididunt deserunt\",\n      \"first_name\": \"consectetur ipsum qui\",\n      \"last_name\": \"dolor cupidatat in deserunt\",\n      \"avatar\": \"non in exercitation\"\n    }\n  ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "login",
					"item": [
						{
							"name": "Creates a session",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate if response header has matching content-type",
											"pm.test(\"[POST]::/login - Content-Type is application/json\", function () {",
											"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// Validate if response has JSON Body ",
											"pm.test(\"[POST]::/login - Response has JSON Body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"// Response Validation",
											"const schema = {\"type\":\"object\",\"properties\":{\"token\":{\"type\":\"string\"}}}",
											"",
											"// Validate if response matches JSON schema ",
											"pm.test(\"[POST]::/login - Schema is valid\", function() {",
											"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"deserunt ullamco in\",\n  \"email\": \"consequat pariatur\",\n  \"password\": \"laboris eiusmod\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"deserunt ullamco in\",\n  \"email\": \"consequat pariatur\",\n  \"password\": \"laboris eiusmod\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"token\": \"cillum enim ut\"\n}"
								},
								{
									"name": "Login error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"deserunt ullamco in\",\n  \"email\": \"consequat pariatur\",\n  \"password\": \"laboris eiusmod\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/login",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"do dolore aliquip qui\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "register",
					"item": [
						{
							"name": "Creates a user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate if response header has matching content-type",
											"pm.test(\"[POST]::/register - Content-Type is application/json\", function () {",
											"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"// Validate if response has JSON Body ",
											"pm.test(\"[POST]::/register - Response has JSON Body\", function () {",
											"    pm.response.to.have.jsonBody();",
											"});",
											"",
											"// Response Validation",
											"const schema = {\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"token\":{\"type\":\"string\"}}}",
											"",
											"// Validate if response matches JSON schema ",
											"pm.test(\"[POST]::/register - Schema is valid\", function() {",
											"    pm.response.to.have.jsonSchema(schema,{unknownFormats: [\"int32\", \"int64\", \"float\", \"double\"]});",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"deserunt ullamco in\",\n  \"email\": \"consequat pariatur\",\n  \"password\": \"laboris eiusmod\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Success",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"deserunt ullamco in\",\n  \"email\": \"consequat pariatur\",\n  \"password\": \"laboris eiusmod\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"in laboris Ut ullamco\",\n  \"token\": \"cillum ipsum\"\n}"
								},
								{
									"name": "Register error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"username\": \"deserunt ullamco in\",\n  \"email\": \"consequat pariatur\",\n  \"password\": \"laboris eiusmod\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/register",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"error\": \"do dolore aliquip qui\"\n}"
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"constants = {",
					"    tokenLength: 17",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://reqres.in/api",
			"type": "string"
		}
	]
}